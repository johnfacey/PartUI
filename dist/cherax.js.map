{"version":3,"sources":["cherax.js"],"names":["Cherax","register","config","window","customElements","define","name","setAttribute","init","HTMLElement","props","attachShadow","mode","innerHTML","template","shadowRoot","querySelector","propName","getAttribute","attr","oldValue","newValue","attribute","comp","getComp","watch","e","console","log"],"mappings":"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","file":"cherax.js","sourceRoot":"..\\src","sourcesContent":["/**\r\n * Cherax Component - Used to simplify implementing Custom HTML Componenets.\r\n * @constructor\r\n * @see {@link http://github.com/johnfacey|GitHub}\r\n */\r\n\r\nconst Cherax = {\r\n\r\n    /**\r\n    * Registers a Cherax Component.\r\n    * @param {object} config - Object used to define a Cherax.\r\n    * @memberof Cherax\r\n    * @example\r\n    * \r\n    * <my-comp prop1=\"Test\"></my-prop>\r\n    * \r\n    * var config = {\r\n    *   \"name\" : \"my-comp\",\r\n    *   \"props\": ['prop1','prop2'],\r\n    *   \"template\": `<b>Click for the timestamp</b><slot name=\"slot1\">Test Slot</slot>`,\r\n    *   \"init\" : function() {\r\n    *\r\n    *      let prop1 = this.getProp('prop1') ? this.getAttribute('prop1') : \"\";\r\n    *\r\n    *        this.getComp().addEventListener('click', e => {\r\n    *\t\t\tthis.getComp().querySelector(\"b\").innerHTML = new Date();\r\n    *\t\t});\r\n    *   },\r\n    *    watch : function(attribute) {\r\n    *        if (attribute.name == 'name') {\r\n    *           this.getComp().querySelector('b').textContent = `Hello, ${attribute.newValue}`;\r\n    *        }\r\n    *   }\r\n    * }\r\n    *\r\n    * Cherax.register(config);\r\n     * \r\n     */\r\n    register(config) {\r\n        window.customElements.define(\r\n            config.name,\r\n            class extends HTMLElement {\r\n\r\n                static get observedAttributes() {\r\n                    return [config.props];\r\n                }\r\n\r\n                constructor() {\r\n\r\n                    super();\r\n                    this.setAttribute('cherax-component', true);\r\n                    this.init = config.init;\r\n                }\r\n\r\n                connectedCallback() {\r\n\r\n                    const shadowRoot = this.attachShadow({\r\n                        mode: 'open'\r\n                    });\r\n\r\n                    shadowRoot.innerHTML = `<cherax-wrapper>${config.template}</cherax-wrapper>`;\r\n                    this.init();\r\n                }\r\n\r\n                /**\r\n                 * Gets the Wrapper Element of a Cherax Component.\r\n                 * @instance\r\n                 * @example\r\n                 * this.getWrap().querySelector(\"b\");\r\n                 */\r\n                getWrap() {\r\n                    return this.shadowRoot.querySelector(\"cherax-wrapper\");\r\n                }\r\n\r\n                /**\r\n                 * Gets a Property of a Cherax Component.\r\n                 * @property {string} propName - returns of Property used in Componenet.\r\n                 * @returns {string} Property \r\n                 * @instance\r\n                 * @example\r\n                 * this.getProp('prop1');\r\n                 */\r\n                getProp(propName) {\r\n                    return this.getAttribute(propName);\r\n                }\r\n\r\n                /**\r\n                 * Gets the Cherax Component.\r\n                 * @returns Cherax Component \r\n                 * @instance \r\n                 * @example\r\n                 * this.getComp();\r\n                 */\r\n                getComp() {\r\n                    return this.shadowRoot;\r\n                }\r\n\r\n                // Respond to attribute changes.\r\n                attributeChangedCallback(attr, oldValue, newValue) {\r\n                    var attribute = {\r\n                        name: attr,\r\n                        oldValue: oldValue,\r\n                        newValue: newValue,\r\n                        comp: this.getComp()\r\n                    }\r\n                    try {\r\n                        config.watch(attribute);\r\n                    } catch(e) {\r\n\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        console.log(`Cherax ${config.name} Registered`);\r\n        return this;\r\n    }\r\n\r\n};"]}